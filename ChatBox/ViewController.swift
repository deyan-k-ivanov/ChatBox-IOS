import UIKit
@preconcurrency import WebKit
import AuthenticationServices
import SafariServices
import AdSupport
import AppTrackingTransparency

final class ViewController: UIViewController, SFSafariViewControllerDelegate {
    
    // MARK: - Static Properties
    static weak var shared: ViewController?
    static var webView: WKWebView!
    static let allowedOrigins = ["chatboxapp.online"]
    
    // MARK: - Properties
    private var webviewView: UIView!
    private var loadingView: UIView!
    private var progressView: UIProgressView!
    private var connectionProblemView: UIImageView!
    private var htmlIsLoaded = false {
        didSet {
            print("[DEBUG] - [ViewController] - [INFO] - [HTML]: –°—Ç–∞—Ç—É—Å –Ω–∞ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –ø—Ä–æ–º–µ–Ω–µ–Ω –Ω–∞: \(htmlIsLoaded)")
        }
    }
    private let defaultUrl = URL(string: "https://chatboxapp.online")!
    private var refreshControl: UIRefreshControl!
    
    // MARK: - Lifecycle Methods
    override func viewDidLoad() {
        super.viewDidLoad()
        print("[DEBUG] - [ViewController] - [INFO] - [Lifecycle]: –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ ViewDidLoad")
        print("üöÄüöÄüöÄ VIEWCONTROLLER FORCE SYNC TEST v2025-08-18-21:25 - –¢–û–ó–ò –õ–û–ì –¢–†–Ø–ë–í–ê –î–ê –°–ï –í–ò–ñ–î–ê! üöÄüöÄüöÄ")
        
        // 1. Basic UI Setup
        print("[DEBUG] - [ViewController] - [INFO] - [UI]: –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ Basic UI Setup")
        setupBasicUI()
        createViews()
        print("[DEBUG] - [ViewController] - [INFO] - [UI]: Basic UI Setup –∑–∞–≤—ä—Ä—à–µ–Ω")
        
        // 2. WebView Setup (–ø–∞—Ä–∞–ª–µ–ª–Ω–æ —Å Background Services)
        print("[DEBUG] - [ViewController] - [INFO] - [WebView]: –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ WebView Complete Setup")
        setupWebView()
               
        print("[DEBUG] - [ViewController] - [INFO] - [Lifecycle]: ViewDidLoad –∑–∞–≤—ä—Ä—à–µ–Ω")
    }
    
    private func createViews() {
        // –°—ä–∑–¥–∞–≤–∞–º–µ –æ—Å–Ω–æ–≤–Ω–∏—Ç–µ views
        webviewView = UIView()
        loadingView = UIView()
        progressView = UIProgressView(progressViewStyle: .default)
        connectionProblemView = UIImageView()
        
        // –î–æ–±–∞–≤—è–º–µ –≥–∏ –∫—ä–º view hierarchy
        view.addSubview(webviewView)
        view.addSubview(loadingView)
        view.addSubview(progressView)
        view.addSubview(connectionProblemView)
        
        // –ó–∞–¥–∞–≤–∞–º–µ constraints
        webviewView.translatesAutoresizingMaskIntoConstraints = false
        loadingView.translatesAutoresizingMaskIntoConstraints = false
        progressView.translatesAutoresizingMaskIntoConstraints = false
        connectionProblemView.translatesAutoresizingMaskIntoConstraints = false
        
        NSLayoutConstraint.activate([
            webviewView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            webviewView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            webviewView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            webviewView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            
            // –î–æ–±–∞–≤–µ—Ç–µ constraints –∑–∞ –æ—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ views —Å–ø–æ—Ä–µ–¥ –Ω—É–∂–¥–∏—Ç–µ
            progressView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            progressView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            progressView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            
            connectionProblemView.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            connectionProblemView.centerYAnchor.constraint(equalTo: view.centerYAnchor)
        ])
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
        // Force layout update
        view.setNeedsLayout()
        view.layoutIfNeeded()
    }
    
    // MARK: - Setup Methods
    private func setupBasicUI() {
        ViewController.shared = self
        edgesForExtendedLayout = .all
        extendedLayoutIncludesOpaqueBars = true
        
        if #available(iOS 11.0, *) {
            view.insetsLayoutMarginsFromSafeArea = false
            additionalSafeAreaInsets = .zero
        }
        
        if let navigationController = navigationController {
            navigationController.navigationBar.isTranslucent = false
            navigationController.setNavigationBarHidden(true, animated: false)
        }
    }
    
    private func setupWebView() {
        print("[DEBUG] - [ViewController] - [INFO] - [WebView]: –ó–∞–ø–æ—á–≤–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        
        guard let webviewContainer = webviewView else {
            print("[DEBUG] - [ViewController] - [ERROR] - [WebView]: webviewView –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ä—Ç –Ω–µ –µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω")
            return
        }
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        let config = WKWebViewConfiguration()
        let controller = WKUserContentController()
        
        // Facebook Tracking
        if #available(iOS 14.5, *) {
            if ATTrackingManager.trackingAuthorizationStatus == .authorized {
                let fbp = ASIdentifierManager.shared().advertisingIdentifier.uuidString
                print("[DEBUG] - [ViewController] - [INFO] - [Tracking]: Facebook Pixel ID –ø–æ–ª—É—á–µ–Ω: \(fbp)")
                
                // –ò–Ω–∂–µ–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ FB Pixel
                let pixelScript = """
                    localStorage.setItem('_fbp', '\(fbp)');
                    if (typeof fbq !== 'undefined') {
                        fbq('init', '\(fbp)');
                        fbq('track', 'PageView');
                    }
                """
                
                let script = WKUserScript(
                    source: pixelScript,
                    injectionTime: .atDocumentEnd,
                    forMainFrameOnly: true
                )
                controller.addUserScript(script)
            }
        }
        
        config.userContentController = controller
        
        // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ WebView
        ViewController.webView = createWebView(
            container: webviewContainer,
            messageHandler: self,
            navigationDelegate: self,
            observer: self
        )
        
        setupWebViewConstraints()
        setupRefreshControl()
        
        DispatchQueue.main.async { [weak self] in
            self?.loadRootUrl()
        }
        
        print("[DEBUG] - [ViewController] - [INFO] - [WebView]: WebView Complete Setup –∑–∞–≤—ä—Ä—à–µ–Ω")
    }
    
    private func setupWebViewConstraints() {
        webviewView.addSubview(ViewController.webView)
        ViewController.webView.translatesAutoresizingMaskIntoConstraints = false
        
        NSLayoutConstraint.activate([
            ViewController.webView.topAnchor.constraint(equalTo: webviewView.topAnchor),
            ViewController.webView.leadingAnchor.constraint(equalTo: webviewView.leadingAnchor),
            ViewController.webView.trailingAnchor.constraint(equalTo: webviewView.trailingAnchor),
            ViewController.webView.bottomAnchor.constraint(equalTo: webviewView.bottomAnchor)
        ])
        
        ViewController.webView.scrollView.contentInsetAdjustmentBehavior = .never
    }
    
    private func setupRefreshControl() {
        refreshControl = UIRefreshControl()
        refreshControl.addTarget(self, action: #selector(refreshWebView), for: .valueChanged)
        ViewController.webView.scrollView.addSubview(refreshControl)
        ViewController.webView.scrollView.bounces = true
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
    }
    
    private func loadRootUrl() {
        print("[DEBUG] - [ViewController] - [INFO] - [Navigation]: –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∏—è URL")
        
        _ = loadWithPreparedUrl(ViewController.webView, URLRequest(url: defaultUrl))
    }

    @objc private func refreshWebView() {
        print("[DEBUG] - [ViewController] - [INFO] - [WebView]: –û–ø—Ä–µ—Å–Ω—è–≤–∞–Ω–µ –Ω–∞ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ")
        if let currentUrl = ViewController.webView.url {
            _ = loadWithPreparedUrl(ViewController.webView, URLRequest(url: currentUrl))
        }
    }
}

// MARK: - WKScriptMessageHandler
extension ViewController: WKScriptMessageHandler {
    func userContentController(
        _ userContentController: WKUserContentController,
        didReceive message: WKScriptMessage
    ) {
        print("[DEBUG] - [ViewController] - [INFO] - [Message]: –ü–æ–ª—É—á–µ–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ: \(message.name)")
        print("[DEBUG] - [ViewController] - [INFO] - [Message]: Message body: \(message.body)")
        print("[DEBUG] - [ViewController] - [INFO] - [Message]: Timestamp: \(Date())")
        
        if message.name == "apple-sign-in" {
            print("[DEBUG] - [ViewController] - [INFO] - [Handler]: ‚úÖ Apple handler match - –∏–∑–≤–∏–∫–≤–∞–º AppleLoginManager")
            AppleLoginManager.shared.handleNativeAppleSignIn(
                from: self,
                webView: ViewController.webView
            )
        }
        
        if message.name == "facebook-login" {
            print("[DEBUG] - [ViewController] - [FORCE_SYNC] - [Handler]: üöÄ v2025-08-18-21:25 Facebook handler match - NATIVE FacebookLoginManager!")
            _ = FacebookLoginManager.shared.handleNativeFacebookSignIn(
                from: self,
                webView: ViewController.webView
            )
        }
        
        switch message.name {
        case "console":
            if let body = message.body as? [String: Any] {
                let type = body["type"] as? String ?? "log"
                let messages = body["message"] as? [String] ?? []
                let messageText = messages.joined(separator: " ")
                
                switch type {
                case "log":
                    print("[DEBUG] - [WebView] - [LOG]: \(messageText)")
                case "error":
                    print("[DEBUG] - [WebView] - [ERROR]: üî¥ \(messageText)")
                case "warn":
                    print("[DEBUG] - [WebView] - [WARN]: ‚ö†Ô∏è \(messageText)")
                case "info":
                    print("[DEBUG] - [WebView] - [INFO]: ‚ÑπÔ∏è \(messageText)")
                default:
                    print("[DEBUG] - [WebView] - [UNKNOWN]: \(messageText)")
                }
            }
            
        case "apple-sign-in":
            // Handle apple sign in
            break
            
        case "facebook-login":
            // Handle facebook login
            break
            
        case "purchase-completed":
            // Handle purchase
            break
            
        default:
            print("[DEBUG] - [WebView] - [WARN]: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ: \(message.name)")
        }
    }
}

// MARK: - WKNavigationDelegate
extension ViewController: WKNavigationDelegate {
    func webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -> Void) {
        if let urlString = navigationAction.request.url?.absoluteString {
            print("[DEBUG] - [ViewController] - [INFO] - [Navigation]: –ó–∞–ø–æ—á–≤–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫—ä–º: \(urlString)")
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —Å–æ—Ü–∏–∞–ª–Ω–∞ –∞–≤—Ç–µ–Ω—Ç–∏–∫–∞—Ü–∏—è - —Ä–∞–±–æ—Ç–∏ –∑–∞ Apple –∏ Facebook
            if urlString.contains("/api/register") && !urlString.contains("code=") && !urlString.contains("id_token=") && !urlString.contains("access_token") {
                print("[DEBUG] - [ViewController] - [INFO] - [Auth]: –ü—Ä–∏—Ö–≤–∞–Ω–∞—Ç —Å–æ—Ü–∏–∞–ª–µ–Ω auth URL")
                
                // –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ Apple authentication (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–æ—Ç–æ –∫–æ–µ—Ç–æ —Ä–∞–±–æ—Ç–∏ native –≤ iOS)
                AppleLoginManager.shared.handleNativeAppleSignIn(from: self, webView: ViewController.webView)
                decisionHandler(.cancel)
                return
            }
            
            // –°—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∞—Ç–∞ billing –ª–æ–≥–∏–∫–∞
            if urlString.contains("/billing/") || urlString.contains("intent://chatboxapp.online/billing/") {
                print("[DEBUG] - [ViewController] - [INFO] - [Billing]: –ü—Ä–∏—Ö–≤–∞–Ω–∞—Ç billing URL")
                PaymentManager.shared.handleBillingURL(urlString) { _ in }
                decisionHandler(.cancel)
                return
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ URL-—ä—Ç –µ –∑–∞ Facebook login
        if let url = navigationAction.request.url {
            if url.absoluteString.contains("facebook.com") && url.absoluteString.contains("oauth") {
                print("[DEBUG] - [FACEBOOK_LOGIN] - [INFO] - [REDIRECT]: –û—Ç–≤–∞—Ä—è–Ω–µ –≤ Safari: \(url)")
                
                // –û—Ç–≤–∞—Ä—è–º–µ –≤ SFSafariViewController
                let safariVC = SFSafariViewController(url: url)
                safariVC.delegate = self
                safariVC.modalPresentationStyle = .fullScreen
                present(safariVC, animated: true)
                
                decisionHandler(.cancel)
                return
            }
            
            // NOTE: Facebook callback –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–º–∞—Ö–Ω–∞—Ç–∞ - FacebookLoginManager –ø—Ä–∞–≤–∏ –¥–∏—Ä–µ–∫—Ç–Ω–∞ POST –∑–∞—è–≤–∫–∞
        }
        
        decisionHandler(.allow)
    }
    
    func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
        print("[DEBUG] - [ViewController] - [INFO] - [Navigation]: –ó–∞—Ä–µ–∂–¥–∞–Ω–µ—Ç–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞ –∑–∞–≤—ä—Ä—à–µ–Ω–æ")
        if let currentURL = webView.url?.absoluteString {
            print("[DEBUG] - [ViewController] - [INFO] - [URL]: –¢–µ–∫—É—â URL: \(currentURL)")
        }
        
        htmlIsLoaded = true
        loadingView.isHidden = true
        progressView.isHidden = true
        refreshControl.endRefreshing()
    }
    
    func webView(_ webView: WKWebView, didFail navigation: WKNavigation!, withError error: Error) {
        print("[DEBUG] - [ViewController] - [ERROR] - [Navigation]: –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è: \(error.localizedDescription)")
        connectionProblemView.isHidden = false
        refreshControl.endRefreshing()
    }
}

// MARK: - Observer
extension ViewController {
    override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {
        if keyPath == "estimatedProgress" {
            progressView.progress = Float(ViewController.webView.estimatedProgress)
        } else if keyPath == #keyPath(WKWebView.url) {
            print("[DEBUG] - [ViewController] - [INFO] - [Observer]: –ó–∞—Å–µ—á–µ–Ω–∞ URL –ø—Ä–æ–º—è–Ω–∞: \(ViewController.webView.url?.absoluteString ?? "")")
        }
    }
}

// MARK: - Status Bar
extension ViewController {
    override var prefersStatusBarHidden: Bool {
        return false
    }

    override var preferredStatusBarStyle: UIStatusBarStyle {
        return .lightContent
    }
}

// MARK: - Home Indicator
extension ViewController {
    override var prefersHomeIndicatorAutoHidden: Bool {
        return true
    }
}

// MARK: - Handle Notification URL
extension ViewController {
    static func isValidDomainUrl(_ url: String) -> Bool {
        return allowedOrigins.contains { url.contains($0) }
    }
    
    static func handleNotificationUrl(_ url: String) {
        guard let webView = ViewController.webView else { return }
        
        DispatchQueue.main.async {
            if let urlObj = URL(string: url) {
                let request = URLRequest(url: urlObj)
                webView.load(request)
            }
        }
    }
}

// MARK: - SFSafariViewControllerDelegate
extension ViewController {
    func safariViewControllerDidFinish(_ controller: SFSafariViewController) {
        print("[DEBUG] - [FACEBOOK_LOGIN] - [INFO] - [CLOSE]: Safari –∏–∑–≥–ª–µ–¥ –∑–∞—Ç–≤–æ—Ä–µ–Ω")
        controller.dismiss(animated: true)
    }
    
    func safariViewController(_ controller: SFSafariViewController, initialLoadDidRedirectTo url: URL) {
        print("[DEBUG] - [FACEBOOK_LOGIN] - [INFO] - [REDIRECT]: –ü—Ä–µ–Ω–∞—Å–æ—á–≤–∞–Ω–µ –∫—ä–º: \(url.absoluteString)")
        
        // NOTE: Facebook callback –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–º–∞—Ö–Ω–∞—Ç–∞ 
        // FacebookLoginManager –ø—Ä–∞–≤–∏ –¥–∏—Ä–µ–∫—Ç–Ω–∞ POST –∑–∞—è–≤–∫–∞ –∫—ä–º /api/register
        // –°–∞–º–æ –∑–∞—Ç–≤–∞—Ä—è–º–µ Safari VC
        controller.dismiss(animated: true)
    }
}